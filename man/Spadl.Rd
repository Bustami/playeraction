% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spadl.R
\name{Spadl}
\alias{Spadl}
\title{Translating raw data to SPADL representation}
\description{
Translating raw data to SPADL representation

Translating raw data to SPADL representation
}
\details{
We use SPADL common language (see details in the paper) to represent raw data
regardless of the data provider used. Every data provider has his own
implement class inheriting from the mother class.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{data}}{\code{data.table} :: the SPADL values stored as data.table}

\item{\code{metadata}}{\code{tibble} :: metadata such as team name,
game-date, ... should have the same number of rows
as `data` and same game-ids.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Spadl$new()}}
\item \href{#method-sanity_check}{\code{Spadl$sanity_check()}}
\item \href{#method-insert}{\code{Spadl$insert()}}
\item \href{#method-get_model_data}{\code{Spadl$get_model_data()}}
\item \href{#method-clone}{\code{Spadl$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Creates the 2 \code{tibble}(s) from mongo connections.
Given that the fixture collection is similar for all
data providers, the `metadata` field can be initialised here.
Must be implemented in each subclass (for each data provider).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Spadl$new(game_ids, fixture_con)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{game_ids}}{\code{integer}}

\item{\code{fixture_con}}{mongo-connection :: fixture collection
connection}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-sanity_check"></a>}}
\if{latex}{\out{\hypertarget{method-sanity_check}{}}}
\subsection{Method \code{sanity_check()}}{
Runs some sanity checks on the created instance
Regardless of the data provider (and the subclass used
to initialise the object), we expect the fields
values to be the same and hence sanity checks can be
implemented here.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Spadl$sanity_check()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
logical :: `TRUE` if all
tests are passed otherwise `FALSE` with an informative
error message
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-insert"></a>}}
\if{latex}{\out{\hypertarget{method-insert}{}}}
\subsection{Method \code{insert()}}{
Insert the instance in the mongo database if sanity-checks are successful
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Spadl$insert(mongo_con)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{mongo_con}}{`mongo-connection` :: where the object should be inserted}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
logical :: insertion status
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_model_data"></a>}}
\if{latex}{\out{\hypertarget{method-get_model_data}{}}}
\subsection{Method \code{get_model_data()}}{
Create model training data from Spadl or atomic Spadl
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Spadl$get_model_data(
  nb_prev_actions = 3L,
  nr_actions = 10L,
  labels = TRUE,
  add_predictions = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Returns}{
populates the \code{training_data} slot.
Handles the insertion in mongo
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Spadl$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
